#include <stdio.h>
#define SIZE 10

int hashTable[SIZE];

// Initialize hash table with -1
void init() {
    for (int i = 0; i < SIZE; i++)
        hashTable[i] = -1;
}

// Hash function
int hash(int key) {
    return key % SIZE;
}

// Insert using linear probing
void insert(int key) {
    int index = hash(key);

    // Linear probing
    for (int i = 0; i < SIZE; i++) {
        int newIndex = (index + i) % SIZE;
        if (hashTable[newIndex] == -1) {
            hashTable[newIndex] = key;
            printf("Inserted %d at index %d\n", key, newIndex);
            return;
        }
    }

    printf("Hash table is full! Could not insert %d\n", key);
}

// Search key
void search(int key) {
    int index = hash(key);

    for (int i = 0; i < SIZE; i++) {
        int newIndex = (index + i) % SIZE;
        if (hashTable[newIndex] == key) {
            printf("Key %d found at index %d\n", key, newIndex);
            return;
        }
        if (hashTable[newIndex] == -1)
            break;
    }

    printf("Key %d not found\n", key);
}

// Display hash table
void display() {
    printf("Hash Table:\n");
    for (int i = 0; i < SIZE; i++) {
        if (hashTable[i] != -1)
            printf("[%d] = %d\n", i, hashTable[i]);
        else
            printf("[%d] = EMPTY\n", i);
    }
}

// Main function
int main() {
    init();

    insert(5);
    insert(15);
    insert(25);
    insert(35);
    insert(95);

    display();

    search(25);
    search(100);

    return 0;
}
