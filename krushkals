#include <stdio.h>
#include <stdlib.h>

#define MAX 30

// Structure for edge
struct Edge {
    int src, dest, weight;
};

// Structure for subset (for union-find)
struct Subset {
    int parent;
    int rank;
};

// Function to find set of an element (with path compression)
int find(struct Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

// Union of two sets
void unionSets(struct Subset subsets[], int x, int y) {
    int rootX = find(subsets, x);
    int rootY = find(subsets, y);

    if (subsets[rootX].rank < subsets[rootY].rank)
        subsets[rootX].parent = rootY;
    else if (subsets[rootX].rank > subsets[rootY].rank)
        subsets[rootY].parent = rootX;
    else {
        subsets[rootY].parent = rootX;
        subsets[rootX].rank++;
    }
}

// Compare function for qsort
int compareEdges(const void* a, const void* b) {
    return ((struct Edge*)a)->weight - ((struct Edge*)b)->weight;
}

void kruskalMST(struct Edge edges[], int V, int E) {
    struct Edge result[MAX];  // Store MST result
    int e = 0;  // Index for result[]
    int i = 0;  // Index for sorted edges

    // Sort edges by weight
    qsort(edges, E, sizeof(edges[0]), compareEdges);

    // Create subsets
    struct Subset subsets[V];
    for (int v = 0; v < V; v++) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

    while (e < V - 1 && i < E) {
        struct Edge next = edges[i++];

        int x = find(subsets, next.src);
        int y = find(subsets, next.dest);

        // If adding this edge doesnâ€™t form a cycle
        if (x != y) {
            result[e++] = next;
            unionSets(subsets, x, y);
        }
    }

    // Print result
    printf("Edges in the Minimum Spanning Tree:\n");
    int total = 0;
    for (i = 0; i < e; i++) {
        printf("%d -- %d == %d\n", result[i].src, result[i].dest, result[i].weight);
        total += result[i].weight;
    }
    pr
