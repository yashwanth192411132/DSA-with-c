#include <stdio.h>
#include <stdlib.h>

// Node structure
struct Node {
    int data;
    struct Node* next;
};

// Utility to create a new node
struct Node* newNode(int data) {
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    temp->data = data;
    temp->next = NULL;
    return temp;
}

// Function to get the count of nodes in a list
int getCount(struct Node* head) {
    int count = 0;
    while (head != NULL) {
        count++;
        head = head->next;
    }
    return count;
}

// Function to get the intersection node
struct Node* getIntersectionNode(struct Node* head1, struct Node* head2) {
    int c1 = getCount(head1);
    int c2 = getCount(head2);
    int d;

    if (c1 > c2) {
        d = c1 - c2;
        while (d--) head1 = head1->next;
    } else {
        d = c2 - c1;
        while (d--) head2 = head2->next;
    }

    while (head1 && head2) {
        if (head1 == head2)
            return head1;
        head1 = head1->next;
        head2 = head2->next;
    }

    return NULL;
}

int main() {
    // Shared part
    struct Node* common = newNode(15);
    common->next = newNode(30);

    // First list: 10 -> 15 -> 30
    struct Node* head1 = newNode(10);
    head1->next = common;

    // Second list: 3 -> 6 -> 9 -> 15 -> 30
    struct Node* head2 = newNode(3);
    head2->next = newNode(6);
    head2->next->next = newNode(9);
    head2->next->next->next = common;

    struct Node* intersection = getIntersectionNode(head1, head2);

    if (intersection)
        printf("Intersection at node with data = %d\n", intersection->data);
    else
        printf("No intersection.\n");

    return 0;
}
