#include <stdio.h>
#include <stdlib.h>

#define MAX 100

struct Stack {
    int data[MAX];
    int top;
};

// Initialize stack
void initStack(struct Stack* s) {
    s->top = -1;
}

// Push element to stack
void push(struct Stack* s, int value) {
    if (s->top >= MAX - 1) {
        printf("Stack overflow\n");
        return;
    }
    s->data[++(s->top)] = value;
}

// Pop element from stack
int pop(struct Stack* s) {
    if (s->top == -1) {
        printf("Stack underflow\n");
        return -1;
    }
    return s->data[(s->top)--];
}

// Peek top element
int peek(struct Stack* s) {
    if (s->top == -1)
        return -1;
    return s->data[s->top];
}

// Check if stack is empty
int isEmpty(struct Stack* s) {
    return s->top == -1;
}

// Queue using two stacks
struct Queue {
    struct Stack s1, s2;
};

// Initialize queue
void initQueue(struct Queue* q) {
    initStack(&q->s1);
    initStack(&q->s2);
}

// Enqueue operation
void enqueue(struct Queue* q, int value) {
    push(&q->s1, value);
}

// Dequeue operation
int dequeue(struct Queue* q) {
    if (isEmpty(&q->s2)) {
        while (!isEmpty(&q->s1)) {
            int temp = pop(&q->s1);
            push(&q->s2, temp);
        }
    }

    if (isEmpty(&q->s2)) {
        printf("Queue is empty\n");
        return -1;
    }

    return pop(&q->s2);
}

int main() {
    struct Queue q;
    initQueue(&q);

    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);

    printf("Dequeued: %d\n", dequeue(&q));
    printf("Dequeued: %d\n", dequeue(&q));

    enqueue(&q, 40);
    printf("Dequeued: %d\n", dequeue(&q));
    printf("Dequeued: %d\n", dequeue(&q));
    printf("Dequeued: %d\n", dequeue(&q));  // Will print "Queue is empty"

    return 0;
}
