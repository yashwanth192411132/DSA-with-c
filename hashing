#include <stdio.h>

#define SIZE 10  // Size of hash table

int hashTable[SIZE];

// Initialize hash table with -1 (indicating empty)
void init() {
    for (int i = 0; i < SIZE; i++) {
        hashTable[i] = -1;
    }
}

// Hash function: key mod table size
int hash(int key) {
    return key % SIZE;
}

// Insert using linear probing
void insert(int key) {
    int index = hash(key);

    // If collision occurs, move forward linearly
    while (hashTable[index] != -1) {
        index = (index + 1) % SIZE;
    }
    hashTable[index] = key;
}

// Search for a key
int search(int key) {
    int index = hash(key);
    int startIndex = index;

    // Keep probing until we find the key or loop back
    while (hashTable[index] != key) {
        index = (index + 1) % SIZE;
        if (index == startIndex)  // Full loop
            return -1;
    }
    return index;
}

// Display hash table
void display() {
    printf("Hash Table:\n");
    for (int i = 0; i < SIZE; i++) {
        printf("%d : %d\n", i, hashTable[i]);
    }
}

int main() {
    init();
    insert(10);
    insert(20);
    insert(25);
    insert(35);

    display();

    int key = 25;
    int result = search(key);
    if (result != -1)
        printf("Key %d found at index %d\n", key, result);
    else
